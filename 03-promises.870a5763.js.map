{"mappings":"qhBAGA,IAAAA,EAAAC,EAAA,SAGAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,MAAO,QACPC,SAAU,YACVC,SAAU,OACVC,QAAS,IAIX,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAG3C,SAASI,EAAcT,EAAUU,GAE/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEf,E,MAAUU,IAEpBM,EAAO,C,SAAEhB,E,MAAUU,GAAQ,GAE5BA,EAAM,G,CAIbP,EAAKe,iBAAiB,UAGtB,SAAkBC,GAChBA,EAAMC,iBAGN,MAAMC,EAAaC,OAAOhB,EAAWiB,OAC/BC,EAAYF,OAAOf,EAAUgB,OAC7BE,EAAcH,OAAOd,EAAYe,OAEvC,IAAIG,EAAa,EACjB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCD,EAAaL,EAAaG,GAAaG,EAAI,GAE3ClB,EAAckB,EAAGD,GACdE,MAAK,EAAC5B,SAAEA,EAAQU,MAAEA,MACjBd,EAAAF,GAASG,OAAOgC,QAAQ,qBAAqB7B,QAAeU,MAAU,IAEvEoB,OAAM,EAAC9B,SAAEA,EAAQU,MAAEA,MAClBd,EAAAF,GAASG,OAAOkC,QAAQ,oBAAoB/B,QAAeU,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["//Aplication: \"Promises generator\"\n//\n//Library import\nimport Notiflix from 'notiflix';\n//\n//Notifications settings\nNotiflix.Notify.init({\n  width: '300px',\n  position: 'right-top',\n  distance: '40px',\n  opacity: 1,\n});\n//\n//Form elements\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n//\n//Promise function\nfunction createPromise(position, delay) {\n  //Generating random state\n  const shouldResolve = Math.random() > 0.3;\n  //Generating new promise\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n//Event listener on form submiting\nform.addEventListener('submit', onSubmit);\n//\n//Submiting function\nfunction onSubmit(event) {\n  event.preventDefault();\n  //\n  //Values of elements after submit\n  const delayValue = Number(delayInput.value);\n  const stepValue = Number(stepInput.value);\n  const amountValue = Number(amountInput.value);\n  // Calculating total delay\n  let totalDelay = 0;\n  for (let i = 1; i <= amountValue; i += 1) {\n    totalDelay = delayValue + stepValue * (i - 1);\n    //Notifications for promises\n    createPromise(i, totalDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","$parcel$interopDefault","Notify","init","width","position","distance","opacity","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayValue","Number","value","stepValue","amountValue","totalDelay","i","then","success","catch","failure"],"version":3,"file":"03-promises.870a5763.js.map"}