{"mappings":"iiBAGA,IAAAA,EAAAC,EAAA,SAGAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,MAAO,QACPC,SAAU,YACVC,SAAU,OACVC,QAAS,IAIX,IAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAG3C,SAASI,EAAcT,EAAUU,GAE/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEf,WAAUU,UAEpBM,EAAO,CAAEhB,WAAUU,S,GAEpBA,E,IAIPP,EAAKe,iBAAiB,UAGtB,SAAkBC,GAChBA,EAAMC,iBAQN,IALA,IAAMC,EAAaC,OAAOhB,EAAWiB,OAC/BC,EAAYF,OAAOf,EAAUgB,OAC7BE,EAAcH,OAAOd,EAAYe,OAG9BG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAGrCjB,EAAciB,EAFDF,EAAYH,GAAcK,EAAI,IAGxCC,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUU,EAAKkB,EAALlB,MACjBd,EAAAF,GAASG,OAAOgC,QAAQ,qBAAoCC,OAAf9B,EAAS,QAAY8B,OAANpB,EAAM,M,IAEnEqB,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUU,EAAKkB,EAALlB,MAClBd,EAAAF,GAASG,OAAOmC,QAAQ,oBAAmCF,OAAf9B,EAAS,QAAY8B,OAANpB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["//Aplication: \"Promises generator\"\n//\n//Library import\nimport Notiflix from 'notiflix';\n//\n//Notifications settings\nNotiflix.Notify.init({\n  width: '300px',\n  position: 'right-top',\n  distance: '40px',\n  opacity: 1,\n});\n//\n//Form elements\nconst form = document.querySelector('.form');\nconst delayImput = document.querySelector('input[name=\"delay\"]');\nconst stepImput = document.querySelector('input[name=\"step\"]');\nconst amountImput = document.querySelector('input[name=\"amount\"]');\n//\n//Promise function\nfunction createPromise(position, delay) {\n  //Generating random state\n  const shouldResolve = Math.random() > 0.3;\n  //Generating new promise\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n//Event listener on form submiting\nform.addEventListener('submit', onSubmit);\n//\n//Submiting function\nfunction onSubmit(event) {\n  event.preventDefault();\n  //\n  //Values of elements after submit\n  const delayValue = Number(delayImput.value);\n  const stepValue = Number(stepImput.value);\n  const amountValue = Number(amountImput.value);\n  // Calculating total delay\n  let totalDelay = 0;\n  for (let i = 1; i <= amountValue; i += 1) {\n    totalDelay = stepValue + delayValue * (i - 1);\n    //Notifications for promises\n    createPromise(i, totalDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$parcel$interopDefault","Notify","init","width","position","distance","opacity","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayImput","$ce04d3a99e08e73b$var$stepImput","$ce04d3a99e08e73b$var$amountImput","$ce04d3a99e08e73b$var$createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayValue","Number","value","stepValue","amountValue","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.d2c3beb5.js.map"}